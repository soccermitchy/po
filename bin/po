#!/bin/bash
#     ______    ______
#    /      \  /      \
#   /██████  |/██████  |  The Future of po-util:
#   ██ |  ██ |██ |  ██ |
#   ██ |__██ |██ \__██ |      Refactored,
#   ██    ██/ ██    ██/       Modular,
#   ███████/   ██████/        Cross-Compatible
#   ██ |
#   ██ |
#   ██/  https://po-util.com

# po - The Ultimate Local Particle Experience for Linux and macOS
# Copyright (C) 2018 Nathan D. Robinson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#### Common functions
source "/usr/local/share/po-common"

#### OS dependent features
if [[ "$(uname -s)" == "Linux" ]]; then
    if [ -f "/.dockerenv" ]; then
        source "/usr/local/share/po-docker"
    else
        source "/usr/local/share/po-linux"
    fi
elif [[ "$(uname -s)" == "CYGWIN_NT-10.0" ]]; then
    source "/usr/local/share/po-cygwin"
else
    source "/usr/local/share/po-mac"
fi

#### Parse arguments

# po help
if [ "$1" == "" ] || [ "$1" == "help" ]; then # Print help
    _help
fi

# po setup-atom
if [ "$1" == "setup-atom" ]; then
    _setup-atom
fi

# po setup-mesh
if [ "$1" == "setup-mesh" ]; then
    _setup-mesh
fi

# po versions
if [ "$1" == "versions" ]; then
  getFirmwareVersions
  exit
fi

# po config
if [ "$1" == "config" ]; then
    _config "$2" "$3" "$4"
fi

# Check if we have a saved settings file.  If not, create it.
# Use defaults: develop duo no
if [ ! -f "$SETTINGS" ]; then
    # echo
    # blue_echo "Your \"$SETTINGS\" configuration file is missing.  Let's create it!"
    config "develop"
fi

# Import our overrides from the ~/.po-util/config file.
source "$SETTINGS"

if [ "$1" == "info" ]; then
    _info
fi

#Import nvm if installed
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# po install
if [ "$1" == "install" ]; then # Install
    _install "$2" "$3"
fi

# po get-added-libs
if [ "$1" == "get-added-libs" ]; then
    _get-added-libs "$2"
fi

# po init
# Create our project files
if [ "$1" == "init" ]; then # Syntax: po init DEVICE dir
    _init "$2" "$3"
fi

# po serial monitor
# Open serial monitor for device
if [ "$1" == "serial" ] && [ "$2" == "monitor" ]; then
    _serial_monitor
fi

# po reboot
if [ "$1" == "reboot" ]; then
    _serial_close "$2" "$3"
fi

# po ls
# List devices aviable over serial
if [ "$1" == "list" ] || [ "$1" == "ls" ]; then
    _list
fi

# po dfu open
# Put device into DFU mode
if [ "$1" == "dfu" ] && [ "$2" == "open" ]; then
    dfu_open "$3" "$4"
    exit
fi

# po dfu close
# Get device out of DFU mode
if [ "$1" == "dfu" ] && [ "$2" == "close" ]; then
    dfu_close
    exit
fi

# po serial open
# Put device into listening mode
if [ "$1" == "serial" ] && [ "$2" == "open" ]; then
    _serial_open "$3" "$4"
fi

# po serial close
if [ "$1" == "serial" ] && [ "$2" == "close" ]; then
    _serial_close "$3" "$4"
fi

if [ "$1" == "safe" ] && [ "$2" == "open" ]; then
    serial_open "$3" "$4"
    echo "L" > "$MODEM"
    sleep 2
    echo "x" > "$MODEM"
    exit
fi

if [ "$1" == "safe" ] && [ "$2" == "close" ]; then
    _serial_close "$3" "$4"
fi

# po update
# Update po-util
if [ "$1" == "update" ]; then
    _update "$2"
fi

##### Library Manager

# po lib
if [ "$1" == "library" ] || [ "$1" == "lib" ]; then
    _lib

    # po lib clean
    if [ "$2" == "clean" ]; then # Prepare for release, remove all symlinks, keeping references in libs.txt
        _lib-clean "$3" "$4"
    fi

    # po lib setup
    if [ "$2" == "setup" ]; then
        _lib-setup "$3"
    fi

    # po lib get
    if [ "$2" == "get" ] || [ "$2" == "install" ]; then # Download a library with git OR Install from libs.txt
        _lib-get "$3" "$4"
    fi

    # po lib purge
    if [ "$2" == "purge" ]; then # Delete library from "$LIBRARY"
        _lib-purge "$3"
    fi

    # po lib create
    if [ "$2" == "create" ]; then # Create a libraries in "$LIBRARY" from files in "$FIRMWAREDIR"  This for when multiple libraries are packaged together and they need to be separated.
        _lib-create "$3"
    fi

    # po lib add
    if [ "$2" == "add" ] || [ "$2" == "import" ]; then # Import a library
        _lib-add "$3" "$4"
    fi

    # po lib rm
    if [ "$2" == "remove" ] || [ "$2" == "rm" ]; then # Remove / Unimport a library
        _lib-rm "$3" "$4"
    fi

    # po lib ls
    if [ "$2" == "list" ] || [ "$2" == "ls" ]; then
        _lib-ls
    fi

    # po lib pack
    if [ "$2" == "package" ] || [ "$2" == "pack" ] || [ "$2" == "export" ]; then
        _lib-pack "$3"
    fi

    # po lib help
    if [ "$2" == "help" ] || [ "$2" == "" ]; then # SHOW HELP TEXT FOR "po library"
        _lib-help
    fi

    # po lib update
    if [ "$2" == "update" ] || [ "$2" == "refresh" ]; then # Update all libraries
        _lib-update
    fi

    # po lib src
    if [ "$2" == "source" ] || [ "$2" == "src" ] ; then
        _lib-src
    fi

    # po lib view-headers
    if [ "$2" == "view-headers" ]; then # See all headers in included libs
        _lib-view-headers "$3"
    fi

    # po lib ex
    # commands for listing and loading examples in a lib
    if [ "$2" == "examples" ] || [ "$2" == "ex" ]; then

        if [ "$3" == "" ]; then
            _lib-ex-help
        else

            if [[ ! -d "$LIBRARY/$4" ]]; then
                echo
                red_echo "Library $4 not found."
                echo
                exit
            fi

            # po lib ex ls
            if [ "$3" == "ls" ] || [ "$3" == "list" ]; then
                _lib-ex-ls "$4"
            fi

            # po lib ex load
            if [ "$3" == "load" ] || [ "$3" == "copy" ] && [ -d "$LIBRARY/$4/examples" ]; then #po lib ex copy LIBNAME EXNAME
                _lib-ex-load "$4" "$5"
            fi

            echo
            red_echo "Please choose a valid command, or run \"po lib ex\" for help."
            echo
            exit
        fi
    exit
    fi

    echo
    red_echo "Please choose a valid command, or run \"po lib\" for help."
    echo
    exit
    fi
##### Close Library

# po create PLATFORM NAME
if [[ "$1" == "create" ]]; then
    _create "$2" "$3"
fi

# po open NAME
if [[ "$1" == "open" ]]; then
    _open "$2"
fi

validateDevicePlatform "$1"

# po DEVICE setup
if [ "$2" == "setup" ]; then
    _setup
fi

# po DEVICE init
# Create our project files
if [ "$2" == "init" ]; then # Syntax: po init DEVICE dir
    _init-device "$3"
fi

# po DEVICE dfu
# Flash already compiled binary
if [ "$2" == "dfu" ]; then
    _dfu "$3"
fi

# po DEVICE upgrade
#Upgrade our firmware on device
if [ "$2" == "upgrade" ] || [ "$2" == "patch" ] || [ "$2" == "update" ]; then
    _upgrade
fi

# po DEVICE clean
# Clean firmware directory
if [ "$2" == "clean" ]; then
    _clean "$3"
    exit
fi

# po DEVICE ota
# Flash binary over the air
# Use --multi to flash multiple devices at once.  This reads a file named devices.txt
if [ "$2" == "ota" ]; then
    ota "$3"
    exit
fi

# po DEVICE build
if [ "$2" == "build" ]; then
    _build "$3"
    exit
fi

# po DEVICE flash
if [ "$2" == "flash" ]; then
    _flash "$3"
    exit
fi

# If an improper command is chosen:
echo
red_echo "Please choose a proper command."
common_commands
